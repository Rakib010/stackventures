// 🔹 Match and Project: Filter documents and show selected fields
db.test2.aggregate([
  { $match: { gender: "Male", age: { $lt: 30 } } },
  { $project: { name: 1, age: 1, gender: 1 } }
])

// 🔹 Add Fields, then Merge back to original collection (or use $out to create a new one)
db.test2.aggregate([
  { $match: { gender: "Male" } },
  { $addFields: { course: "level-2", eduTech: "Programming Hero" } },
  // { $out: "course-student" },         // Uncomment to save into new collection
  { $merge: "test2" }                    // Merges updated data into existing collection
])

// 🔹 Group by gender, count, and show full document
db.test2.aggregate([
  {
    $group: {
      _id: "$gender",
      count: { $sum: 1 },
      fullDoc: { $push: "$$ROOT" }
    }
  },
  { $project: { "fullDoc.name": 1, "fullDoc.email": 1 } }
])

// 🔹 Salary stats: Total, Max, Min, Avg + range between max and min
db.test2.aggregate([
  {
    $group: {
      _id: null,
      totalSalary: { $sum: "$salary" },
      maxSalary: { $max: "$salary" },
      minSalary: { $min: "$salary" },
      avgSalary: { $avg: "$salary" }
    }
  },
  {
    $project: {
      totalSalary: 1,
      maxSalary: 1,
      minSalary: 1,
      avgSalary: 1,
      rangeBetweenMaxandMin: { $subtract: ["$maxSalary", "$minSalary"] }
    }
  }
])

// 🔹 Unwind friends array and group by friend name to count how many times each appears
db.test.aggregate([
  { $unwind: "$friends" },
  { $group: { _id: "$friends", count: { $sum: 1 } } }
])

// 🔹 Unwind interests and group by age to collect interests per age group
db.test.aggregate([
  { $unwind: "$interests" },
  {
    $group: {
      _id: "$age",
      interestsPerAge: { $push: "$interests" }
    }
  }
])

// 🔹 Bucket age into ranges and count, sort and limit results
db.test2.aggregate([
  {
    $bucket: {
      groupBy: "$age",
      boundaries: [20, 40, 60, 80],
      default: "Above 80",
      output: {
        count: { $sum: 1 },
        people: { $push: "$$ROOT" }
      }
    }
  },
  { $sort: { count: -1 } },
  { $project: { count: 1 } },
  { $limit: 2 }
])

// 🔹 Multiple pipelines with $facet: separate stats in same aggregation
db.test2.aggregate([
  {
    $facet: {
      friendsCount: [
        { $unwind: "$friends" },
        { $group: { _id: "$friends", count: { $sum: 1 } } }
      ],
      Education: [
        { $unwind: "$education" },
        { $group: { _id: "$education", count: { $sum: 1 } } }
      ],
      skills: [
        { $unwind: "$skills" },
        { $group: { _id: "$skills", count: { $sum: 1 } } }
      ]
    }
  }
])

// 🔹 $lookup: Perform a join between `orders` and `test` collection
db.orders.aggregate([
  {
    $lookup: {
      from: "test",              // Collection to join
      localField: "userId",      // Local field in 'orders'
      foreignField: "_id",       // Foreign field in 'test'
      as: "user"                 // Result will appear in 'user' array
    }
  }
])

// ℹ️ Indexing Concepts
// - COLLSCAN: Full collection scan (slow if no index)
// - IXSCAN: Indexed scan (faster performance with proper indexes)

// 🔹 Compound Index: Index on multiple fields, e.g. { age: 1, gender: 1 }
// 🔹 Text Index: For searching text, e.g. db.collection.createIndex({ description: "text" })

